desc: MIDI CC Compressor
author: sjrb
version: 1.0
about:
  MIDI CC Compressor

  This .jsfx acts as a CC compressor and fattens up the CC curve, by increasing the input CC values.

  Sample use case: Some guitar synths and MIDI guitar controllers send string envelope information via MIDI for each string.  A CC event is often used; the value is based on the amplitude of the string over time.  E.g., the Jamstik in MPE mode defaults to using CC11 on channels 2-7 to represent the string level for each of the 6 guitar strings.  This CC can be used to drive a parameter in your synth, e.g., a filter or volume.  It's basically an old-school envelope follower.  Since it follows the string's natural decay, however, there is a fairly rapid dropoff of the value after the initial attack.  This .jsfx slows down that decay and fattens up the CC tail.  This can provide more sustain and a more full sound, e.g., when used to drive synth volume for that channel/part.

tags: MIDI processing routing CC guitar synth string envelope compressor

slider1:ccsel=11<0,127,1{0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Sel L,33 Mod Wheel L,34 Breath L,35,36 Foot P L,37 Porta L,38 Data Entry L,39 Vol L,40 Balance L,41,42 Pan L,43 Expression L,44 Ctrl 1 L,45 Ctrl 2 L,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv,96 Data B. Inc,97 Data B. Dec,98 NRP L,99 NRP M,100 RP L,101 RP M,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>Controller
slider2:chan=16<0,16,1{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,all}>MIDI Channel
slider3:maxval=127<60,127,1>Max Value
slider4:boost=2<1,11,2{0%,20%,40%,60%,80%,100%}>Boost

in_pin:none
out_pin:none

@slider

@block
while (
  midirecv(mpos, msg1, msg2, msg3) ? (
    msg = msg1 >> 4;
    msg_chan = msg1 & 0x0F;
    // Check if a CC message (11)
    // Check if 'all' (16) or requested channel
    // Check if it's the requested CC
    // Check if boost requested
    ((msg == 11) && (chan == 16 || chan == msg_chan) && (ccsel == msg2) && (boost > 0)) ? (
      msg3 = floor(maxval-((maxval-msg3)/(maxval^(1-((boost)^-1))))^(boost));
    );
    msg3 > maxval ? msg3 = maxval;
    msg3 < 0 ? msg3 = 0;
    midisend(mpos, msg1, msg2, msg3);
  );
);
